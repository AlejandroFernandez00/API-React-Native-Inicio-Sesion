{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\ale28\\\\Downloads\\\\bp-StackNavigator-RN-main\\\\Screens\\\\LoginScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Google from 'expo-google-app-auth';\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    _classCallCheck(this, LoginScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"_signInWithGoogle\",\n    value: function _signInWithGoogle() {\n      var result;\n      return _regeneratorRuntime.async(function _signInWithGoogle$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Google.logInAsync({\n                androidClientId: \"ANDROID-GOOGLE-CONSOLE-KEY\",\n                scopes: ['profile', 'email']\n              }));\n\n            case 3:\n              result = _context.sent;\n\n              if (!(result.type === 'success')) {\n                _context.next = 8;\n                break;\n              }\n\n              try {\n                this.props.onLogin();\n              } catch (error) {\n                console.log(\"Something happened \" + error);\n              }\n\n              _context.next = 9;\n              break;\n\n            case 8:\n              return _context.abrupt(\"return\", {\n                cancelled: true\n              });\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              return _context.abrupt(\"return\", {\n                error: true\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 11]], Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }\n      }, React.createElement(Button, {\n        onPress: function onPress() {\n          return _this._signInWithGoogle();\n        },\n        title: \"Iniciar sesi\\xF3n con Google\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport { LoginScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/ale28/Downloads/bp-StackNavigator-RN-main/Screens/LoginScreen.js"],"names":["React","Component","Google","LoginScreen","logInAsync","androidClientId","scopes","result","type","props","onLogin","error","console","log","cancelled","styles","container","_signInWithGoogle","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;;AAGA,OAAO,KAAKC,MAAZ,MAAwB,sBAAxB;;IAEqBC,W;;;;;;;;;;;;;;;;;;;;;+CAMYD,MAAM,CAACE,UAAP,CAAkB;AACnCC,gBAAAA,eAAe,EAAE,4BADkB;AAEnCC,gBAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,OAAZ;AAF2B,eAAlB,C;;;AAAfC,cAAAA,M;;oBAKFA,MAAM,CAACC,IAAP,KAAgB,S;;;;;AAChB,kBAAI;AACA,qBAAKC,KAAL,CAAWC,OAAX;AACH,eAFD,CAEE,OAAOC,KAAP,EAAa;AACXC,gBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBF,KAApC;AACH;;;;;;+CAEM;AAAEG,gBAAAA,SAAS,EAAE;AAAb,e;;;;;;;;;+CAIJ;AAAEH,gBAAAA,KAAK,EAAE;AAAT,e;;;;;;;;;;;6BAKP;AAAA;;AACJ,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEI,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACC,iBAAL,EAAN;AAAA,SADb;AAEI,QAAA,KAAK,EAAC,8BAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAQH;;;;EApCoChB,S;;SAApBE,W;AAwCrB,IAAMY,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,SAAS,EAAE;AACPI,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE,MAFV;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,cAAc,EAAE;AAJT;AADkB,CAAlB,CAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport {StyleSheet, Text, View, Button} from 'react-native';\r\n\r\nimport * as Google from 'expo-google-app-auth'\r\n\r\nexport default class LoginScreen extends Component{\r\n\r\n    // Acuerdense de poner su key de Google Console\r\n    async _signInWithGoogle(){\r\n\r\n        try {\r\n            const result = await Google.logInAsync({\r\n                androidClientId: \"ANDROID-GOOGLE-CONSOLE-KEY\",\r\n                scopes: ['profile', 'email'],\r\n            });\r\n    \r\n            if (result.type === 'success') {\r\n                try {\r\n                    this.props.onLogin();\r\n                } catch (error){\r\n                    console.log(\"Something happened \" + error);\r\n                }\r\n            } else {\r\n                return { cancelled: true };\r\n            }\r\n\r\n        } catch (e) {\r\n            return { error: true };\r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <View style={styles.container}>\r\n                <Button\r\n                    onPress={() => this._signInWithGoogle()}\r\n                    title=\"Iniciar sesiÃ³n con Google\"\r\n                />\r\n            </View>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}