{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\ale28\\\\Downloads\\\\bp-StackNavigator-RN-main\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport LoginScreen from \"./Screens/LoginScreen\";\nimport MainScreen from \"./Screens/MainScreen\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isLoggedIn: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"setLogin\",\n    value: function setLogin() {\n      this.setState({\n        isLoggedIn: true\n      });\n    }\n  }, {\n    key: \"setLogout\",\n    value: function setLogout() {\n      this.setState({\n        isLoggedIn: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var screen;\n\n      if (this.state.isLoggedIn) {\n        screen = React.createElement(MainScreen, {\n          onLogout: function onLogout() {\n            return _this2.setLogout();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 22\n          }\n        });\n      } else {\n        screen = React.createElement(LoginScreen, {\n          onLogin: function onLogin() {\n            return _this2.setLogin();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 22\n          }\n        });\n      }\n\n      return screen;\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/Users/ale28/Downloads/bp-StackNavigator-RN-main/App.js"],"names":["React","Component","LoginScreen","MainScreen","App","props","state","isLoggedIn","setState","screen","setLogout","setLogin"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,OAAOC,WAAP;AACA,OAAOC,UAAP;;IAEqBC,G;;;;;AAEjB,eAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAACC,MAAAA,UAAU,EAAC;AAAZ,KAAb;AAFc;AAGjB;;;;+BAES;AACN,WAAKC,QAAL,CAAc;AAACD,QAAAA,UAAU,EAAC;AAAZ,OAAd;AACH;;;gCAEU;AACP,WAAKC,QAAL,CAAc;AAACD,QAAAA,UAAU,EAAC;AAAZ,OAAd;AACH;;;6BAEO;AAAA;;AAEJ,UAAIE,MAAJ;;AACA,UAAG,KAAKH,KAAL,CAAWC,UAAd,EAAyB;AACrBE,QAAAA,MAAM,GAAG,oBAAC,UAAD;AAAY,UAAA,QAAQ,EAAE;AAAA,mBAAM,MAAI,CAACC,SAAL,EAAN;AAAA,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AACH,OAFD,MAEO;AACHD,QAAAA,MAAM,GAAG,oBAAC,WAAD;AAAa,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACE,QAAL,EAAN;AAAA,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AACH;;AAED,aAAOF,MAAP;AAEH;;;;EA1B4BR,S;;SAAZG,G","sourcesContent":["import React, {Component} from 'react';\n\nimport LoginScreen from \"./Screens/LoginScreen\";\nimport MainScreen from \"./Screens/MainScreen\";\n\nexport default class App extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {isLoggedIn:false}\n    }\n\n    setLogin(){\n        this.setState({isLoggedIn:true});\n    }\n\n    setLogout(){\n        this.setState({isLoggedIn:false});\n    }\n\n    render(){\n\n        let screen;\n        if(this.state.isLoggedIn){\n            screen = <MainScreen onLogout={() => this.setLogout()}/>\n        } else {\n            screen = <LoginScreen onLogin={() => this.setLogin()}/>\n        }\n\n        return screen;\n\n    }\n\n} "]},"metadata":{},"sourceType":"module"}